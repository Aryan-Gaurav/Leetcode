Problem Link
https://leetcode.com/problems/longest-palindromic-substring/
https://www.interviewbit.com/problems/longest-palindromic-substring/

Description:
Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.(LEETCODE testcases are weak)

Code:
Solution 1:O(N) time and O(N) space

Manacher's Algorithm

class Solution {
public:
string longestPalindrome(string s) 
{
    if(s.size()<2)
        return s;
    int n=s.size();
    int d1[n],d2[n];
    int l=0,r=-1;
    for(int i=0;i<n;i++)
    {
        if(r>=i)
            d1[i]=min(r-i+1,d1[l+r-i]);
        else d1[i]=1;
        while(i+d1[i]<n && i-d1[i]>=0 && s[i+d1[i]]==s[i-d1[i]])
            d1[i]++;
        if(i+d1[i]-1>r)
        {
            r=i+d1[i]-1;
            l=i-(d1[i]-1);
        }
    }
    l=0,r=-1;
    for(int i=0;i<n;i++)
    {
        if(r>=i)
            d2[i]=min(r-i+1,d2[l+r-i+1]);  //in calculation is little bit different than d1[i]...look carefully 1 is addede so that the matching character 
        else d2[i]=0;                       // is calculated right.
        while(i+d2[i]<n && i-d2[i]-1>=0 && s[i-d2[i]-1]==s[i+d2[i]])
            d2[i]++;
        if(i+d2[i]-1>r)
        {
            r=i+d2[i]-1;
            l=i-d2[i];
        }
    }
    l=-1,r=-1;
    int len=0;
    for(int i=0;i<n;i++)
    {
        if(len<(2*d1[i]-1))
            len=2*d1[i]-1,l=i-(d1[i]-1),r=i+d1[i]-1;
        if(len<2*d2[i])
            len=2*d2[i],l=i-d2[i],r=i+d2[i]-1;
    }
    string ans=s.substr(l,len);
    return ans;
}
};

Solution 2:
DP solution( O(N*N) time and O(N*N) space)
string Solution::longestPalindrome(string s) 
{
    int n=s.size();
    bool dp[n][n];
    memset(dp,false,sizeof(dp));
    int len=0,idx=-1;
    for(int sum=0;sum<2*n-1;sum++)
    {
      for(int i=sum/2;i>=0;i--)
      {
        int j=sum-i;
        if(j>=n)
            break;
        if(i==j)
            dp[i][i]=1;
        else if(i+1==j)
            dp[i][j]=s[i]==s[j];
        else dp[i][j]=(s[i]==s[j]) && dp[i+1][j-1];
        if(len<j-i+1 && dp[i][j])
            len=j-i+1,idx=i;
      }
    }
    string ans=s.substr(idx,len);
    return ans; 
}

The above dp solution can be space optimised to O(N) by using two vector of lenght n.

Solution 3:
O(N*N) time but O(1) space(in avg. case it performs very good than DP as in DP its always O(N*N) but it goes N*N in worst case when string has all identical 
characters).

We consider each character of string as center and try to expand in both the directions and calculate the length of longest palindrome.We can write separate
code for odd length palindrome and even length palindrome.To avoid writing two separate loops we can tackle this very easily because we have problem in even
length.
For eg if s="abba",if we take 1st 'a' or 2nd 'a' as center,then we can't expand but if we add "*" between two characters and in starting and end.
We get s=" *a*b*b*a* " and we start to expand around this '*' then we can tackle even length palindromes and if we expand around alphabets we get odd length.
               ^
               |_____ expanding around this gives even length palindromes.
               
class Solution {
public:
string longestPalindrome(string s) 
{
    if(s.size()<2)
        return s;
    string temp="*";
    for(auto x:s)
    {
        temp+=x;
        temp+='*';
    }
    int n=temp.size();
    int mx=1,st=0;
    for(int i=1;i<n-1;i++)
    {
        int l=i,r=i;
        while(l-1>=0 and r+1<n and temp[l-1]==temp[r+1])
        {
            l--;
            r++;
        }
        if(mx<(r-l+1))
        {
            mx=r-l+1;
            st=l;
        }
    }
    string ans="";
    for(int i=st;i<st+mx;i++)
    {
        if(temp[i]!='*')    //construct the answer
            ans+=temp[i];
    }
    return ans;
}
};
