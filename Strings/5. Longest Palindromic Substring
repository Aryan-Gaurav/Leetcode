Problem Link
https://leetcode.com/problems/longest-palindromic-substring/
https://www.interviewbit.com/problems/longest-palindromic-substring/

Description:
Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.(LEETCODE testcases are weak)

Code:
Solution 1:O(N) Manacher's Algorithm
class Solution {
public:
string longestPalindrome(string s) 
{
    if(s.size()<2)
        return s;
    int n=s.size();
    int d1[n],d2[n];
    int l=0,r=-1;
    for(int i=0;i<n;i++)
    {
        if(r>=i)
            d1[i]=min(r-i+1,d1[l+r-i]);
        else d1[i]=1;
        while(i+d1[i]<n && i-d1[i]>=0 && s[i+d1[i]]==s[i-d1[i]])
            d1[i]++;
        if(i+d1[i]-1>r)
        {
            r=i+d1[i]-1;
            l=i-(d1[i]-1);
        }
    }
    l=0,r=-1;
    for(int i=0;i<n;i++)
    {
        if(r>=i)
            d2[i]=min(r-i+1,d2[l+r-i+1]);  //in calculation is little bit different than d1[i]...look carefully 1 is addede so that the matching character 
        else d2[i]=0;                       // is calculated right.
        while(i+d2[i]<n && i-d2[i]-1>=0 && s[i-d2[i]-1]==s[i+d2[i]])
            d2[i]++;
        if(i+d2[i]-1>r)
        {
            r=i+d2[i]-1;
            l=i-d2[i];
        }
    }
    l=-1,r=-1;
    int len=0;
    for(int i=0;i<n;i++)
    {
        if(len<(2*d1[i]-1))
            len=2*d1[i]-1,l=i-(d1[i]-1),r=i+d1[i]-1;
        if(len<2*d2[i])
            len=2*d2[i],l=i-d2[i],r=i+d2[i]-1;
    }
    string ans=s.substr(l,len);
    return ans;
}
};

Solution 2:
DP solution
