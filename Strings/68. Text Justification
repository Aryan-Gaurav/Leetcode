Problem Link:
https://leetcode.com/problems/text-justification/
https://www.interviewbit.com/problems/justified-text/

Description:
Given an array of words and a width maxWidth, format the text such that each line has exactly maxWidth characters and is fully (left and right) justified.

You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces ' ' when necessary so that each line has exactly maxWidth characters.

Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line do not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.

For the last line of text, it should be left justified and no extra space is inserted between words.

Note:

A word is defined as a character sequence consisting of non-space characters only.
Each word's length is guaranteed to be greater than 0 and not exceed maxWidth.
The input array words contains at least one word.

Code:
Solution 1:
class Solution {
public:
    vector<string> fullJustify(vector<string>& s, int l) 
    {
        vector<string> ans;
       int n=s.size();
       for(int i=0;i<n;)
       {
            string temp=s[i];     //first add the current string
            int idx=i;
            i++;
            while(i<n && temp.size()+s[i].size()+1<=l) //check if next sting can be added
                temp+=' '+s[i],i++;
            int rem=l-temp.size(),cnt=i-idx; // no of spaces left and total slots
            if(i==n)              //base case to not touch the last line
            {
                while(temp.size()<l)
                    temp+=' ';
                ans.push_back(temp);
                break;
            }
            if(cnt>1)
            {
                int perword=rem/(cnt-1),more=rem%(cnt-1); //how many spaces to be added in ech slot and what more is left is added to remaining ones from left 
                for(int j=0;j<temp.size();j++)
                {
                    if(temp[j]==' ')
                    {
                        temp.insert(j,perword,' '),j+=perword;  //always remember this format to insert(pos,frequency, character)
                        if(more)
                            temp.insert(j,1,' '),more--,j++;
                    }
                }
            }
            else
            {
                while(temp.size()<l)  //if only one word is formed the add remaning spaces to last
                    temp+=' ';
            }
            ans.push_back(temp);
       } 
       return ans;
    }
};
