Problem Link:
https://leetcode.com/problems/compare-version-numbers/
https://www.interviewbit.com/problems/compare-version-numbers/

Description:
Compare two version numbers version1 and version2.
If version1 > version2 return 1; if version1 < version2 return -1;otherwise return 0.

You may assume that the version strings are non-empty and contain only digits and the . character.

The . character does not represent a decimal point and is used to separate number sequences.

For instance, 2.5 is not "two and a half" or "half way to version three", it is the fifth second-level revision of the second first-level revision.
You may assume the default revision number for each level of a version number to be 0. 
For example, version number 3.4 has a revision number of 3 and 4 for its first and second level revision number. 
Its third and fourth level revision number are both 0.

Code:
Solution 1:
int cmp(string a,string b)
{
    if(a.size()!=b.size())
        return a.size()>b.size() ? 1 :-1;
    int n=a.size();
    for(int i=0;i<n;i++)
    {
        if(a[i]!=b[i])
            return a[i]>b[i] ? 1 : -1;
    }
    return 0;
}
int Solution::compareVersion(string a, string b) 
{
   vector<string> v1,v2;
    int n=a.size(),m=b.size();
    for(int i=0;i<n;i++)
    {
        while(i<n &&a[i]=='0')
        i++;
        int len=0,idx=i;
        while(i<n && a[i]!='.')
            i++,len++;
        if(len)
        v1.push_back(a.substr(idx,len));
    }
    for(int i=0;i<m;i++)
    {
        while(i<n &&b[i]=='0')
        i++;
        int len=0,idx=i;
        while(i<m && b[i]!='.')
            i++,len++;
        if(len)
        v2.push_back(b.substr(idx,len));
    }
    while(!v1.empty()||!v2.empty())
    {
        if(v1.empty())
            return -1;
        if(v2.empty())
            return 1;
        if(int x=cmp(v1[0],v2[0]);x!=0)
            return x;
        v1.erase(v1.begin());
        v2.erase(v2.begin());
    }
    return 0;
}
