Problem Link:
https://leetcode.com/problems/merge-k-sorted-lists/

Description:
You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.

Merge all the linked-lists into one sorted linked-list and return it.

 

Example 1:

Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The linked-lists are:
[
  1->4->5,
  1->3->4,
  2->6
]
merging them into one sorted list:
1->1->2->3->4->4->5->6

Code:
Just merge two lists and then merge it with third then fourth and so on.This will lead to O(N*K*K) time complexity.

Solution 1:
Time Comlexity is O(K*N*logK) where n elements are present in each list.
Space Complexity is O(log K).

class Solution {
public:
    struct cmp
    {
        bool operator()(ListNode* a,ListNode* b)
        {
            return a->val > b->val; //custom comparator of priority queue is somewhat opp. to sorting
        }
    };
    ListNode* mergeKLists(vector<ListNode*> &lists) 
    {
        priority_queue<ListNode*,vector<ListNode*>,cmp> pq; //priority queue with custom comparator
        for(auto x:lists)
            if(x!=NULL)
            pq.push(x);
        if(pq.empty())    //no nodes to process
            return NULL;
        ListNode* head=NULL;
        head=pq.top();
        pq.pop();
        auto t=head;
        if(head->next!=NULL)
            pq.push(head->next);
        while(!pq.empty())
        {
            auto temp=pq.top();
            pq.pop();
            t->next=temp;
            t=temp;
            if(temp->next!=NULL)
                pq.push(temp->next);
        }
        return head;
    }
};

Solution 2:
You can do by merging two lists as one(k/2) times then for(k/4) this will also lead to same time complexity.

This appears to be O(1) space but recursion stack takes O(logK) space as depth can be atmost log(K).

class Solution {
public:
    ListNode* join(ListNode *a,ListNode *b) //function to join two sorted lists in O(1) space
    {
        if(a==NULL)
            return b;
        if(b==NULL)
            return a;
        ListNode *start=NULL,*cur=NULL;
        while(a!=NULL && b!=NULL)
        {
            if(a->val <= b->val)
            {
                if(start==NULL)
                {
                    start=a;
                    cur=a;
                }
                else
                {
                    cur->next=a;
                    cur=a;
                }
                a=a->next;
            }
            else
            {
                if(start==NULL)
                {
                    start=b;
                    cur=b;
                }
                else
                {
                    cur->next=b;
                    cur=b;
                }
                b=b->next;
            }
        }
        if(a==NULL)
            cur->next=b;
        else if(b==NULL)
            cur->next=a;
        return start;
    }
    ListNode* help(int i,int j,vector<ListNode*> &v)
    {
        if(i==j)
            return v[i];
        else
        {
            int mid=(i+j)/2;
            auto x=help(i,mid,v),y=help(mid+1,j,v);
            return join(x,y);
        }
    }
    ListNode* mergeKLists(vector<ListNode*> &v) 
    {
        if(v.empty())
            return NULL;
       return help(0,v.size()-1,v);
    }
};

Solution 3:-
For really O(1) space solution, we can implement the help function iteratively.

 ListNode* mergeKLists(vector<ListNode*> &v) 
    {
        if(v.empty())
            return NULL;
       int n=v.size();
        for(int len=1;len<n;len*=2)
        {
            for(int i=0;i<n;i+=2*len)
            {
                int j=i+len;
                if(j<n) //if we have gone out of bounds then donot do it
                    v[i]=join(v[i],v[j]); //its implementation is above this solution
            }
        }
        return v[0]; //finally v[0] contains the answer
    }
