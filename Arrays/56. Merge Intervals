Problem link 
https://leetcode.com/problems/merge-intervals/
https://www.interviewbit.com/problems/merge-overlapping-intervals/

Description:
Given a collection of intervals, merge all overlapping intervals.

Code:
static bool cmp(Interval &a,Interval &b)
{
    if(a.start!=b.start) return a.start<b.start;
    return a.end<b.end;
}
vector<Interval> Solution::merge(vector<Interval> &v) 
{
    sort(v.begin(),v.end(),cmp);
    for(auto itr=v.begin();itr!=v.end();)
    {
        int ed=(*itr).end;
        auto ptr=itr;
        while(itr!=v.end()&&(*itr).start<=ed)
        {
            ed=max(ed,(*itr).end);
            itr++;
        }
        (*ptr).end=ed;
        ptr++;
        if(ptr!=itr)
        itr=v.erase(ptr,itr);
    }
    return v;
}
Code 2:

class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>> &v) 
    {
        if(v.empty())
            return {};
        vector<vector<int> >  ans;
        sort(v.begin(),v.end(),[&](const vector<int> &a,const vector<int> &b)
             {
                 return a[0]<b[0];
             }
            );
        int end=v[0][1],start=v[0][0];
        for(auto &x:v)
        {
            int l=x[0],r=x[1];
            if(end<l)
            {
                ans.push_back({start,end});
                start=l;
                end=r;
            }
            else
            {
                end=max(end,r);
            }
        }
        ans.push_back({start,end});
        return ans;
    }
};

Code 3:
Elegant Implementation.Try to extend the last interval's end time

class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>> &v) 
    {
        if(v.empty())
            return {};
        vector<vector<int> >  ans;
        sort(v.begin(),v.end(),[&](const vector<int> &a,const vector<int> &b)
             {
                 return a[0]<b[0];
             }
            );
        for(auto &x:v)
        {
             if(ans.size() && ans.back()[1]>=x[0])
             {
                 ans.back()[1]=max(ans.back()[1],x[1]);
             }
            else ans.push_back(x);
        }
        return ans;
    }
};
