Problem Link
https://leetcode.com/problems/divide-two-integers/

Given two integers dividend and divisor, divide two integers without using multiplication, division and mod operator.
Return the quotient after dividing dividend by divisor.The integer division should truncate toward zero, which means losing its fractional part.

Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1].
For the purpose of this problem, assume that your function returns 231 − 1 when the division result overflows.

Code:
Solution 1:
int Solution::divide(int n, int m) 
{
    if(n==INT_MIN)
    {
        if(m==-1)
            return INT_MAX;
        if(m==1)
            return n;
        if(m&1)
            return divide(n+1,m);
        if(m%2==0)
            return divide(n>>1,m>>1);
    }
    int sign=(n<0)^(m<0) ? -1 : 1;
    int res=0;
    int divdnd=abs(n),divsr=abs(m);
    while(divdnd>=divsr)
    {
        int i=0;
        while(divdnd-(divsr<<(i+1))>=0)
                i++;
        divdnd-=(divsr<<i);
        res|=(1<<i);
    }
    return sign*res;
}
