Problem Link:
https://leetcode.com/problems/container-with-most-water/
https://www.interviewbit.com/problems/container-with-most-water/

Description:
Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints 
of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.

Note: You may not slant the container and n is at least 2.

Solution 1:O(N)
The area depends on two things, the width of container and minimum of height of two rods.We first start by considering the container with maximum width, the start
to decrease the width.If we want to increase the height of container then we must discard the rod with smallest height among two because dicarding lager will not
increase the area.

1st Code:-

int Solution::maxArea(vector<int> &v) 
{
    int n=v.size();
    int left=0,right=n-1;
    int ans=0;
    while(left<right)
    {
        ans=max(ans,(right-left)*min(v[right],v[left]));
        if(v[left]<v[right])
            left++;
        else right--;
    }
    return ans;
}

2nd Code:-

class Solution {
public:
    int maxArea(vector<int> &v) 
    {
        if(v.size()<2)
            return 0;
        int n=v.size();
        int ans=0,l=0,r=n-1;
        while(l<r)
        {
            ans=max(ans,(r-l)*min(v[l],v[r]));
            if(v[l]<v[r])
                l++;
            else if(v[l]>v[r]) 
                r--;
            else            //when v[l]==v[r] we can move both pointers away from that point
            {               //this always leads to optimum solution as if lets say move left pointer away(l++) then 2 case arises
                l++;        //1. when v[l]<v[r] this is never going to improve the answer as width and height both decreased from previous value
                r--;        //2. when v[l]>v[r] in this case v[r] is going to be bottleneck and width has already decrese by 1 so ans donot improves.
            }               // so we dont get optimum ans even if we move any one pointer,same for other one.So move both pointers
        }
        return ans;
    }
};
