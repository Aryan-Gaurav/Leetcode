Problem Link:
https://www.lintcode.com/problem/max-consecutive-ones-ii/description

Description:
Given a binary array, find the maximum number of consecutive 1s in this array if you can flip at most one 0.

Example 1:

Input: [1,0,1,1,0]
Output: 4
Explanation: Flip the first zero will get the the maximum number of consecutive 1s.
  After flipping, the maximum number of consecutive 1s is 4.
 

Note:

The input array will only contain 0 and 1.
The length of input array is a positive integer and will not exceed 10,000
 

Follow up:
What if the input numbers come in one by one as an infinite stream? In other words, 
you can't store all numbers coming from the stream as it's too large to hold in memory. Could you solve it efficiently?

Code:
Solution 1:
Use the sliding window technique as in max consecutive ones III with k=1;
class Solution {
public:
    int findMaxConsecutiveOnes(vector<int> &v) 
    {
        int n=v.size();
        int l=0,r=0,k=1,cnt=0;
        int ans=0;
        while(r<n)
        {
            if(v[r]==1)   //if 1 is encountered then the current configuration is valid, then update the ans if its max.
                ans=max(ans,r-l+1),r++;

            else if(v[r]==0)
            {
                cnt++;
                while(l<=r && cnt>k)    // if number of zeroes exceed 1 then shrink left pointer of window till valid configuration is reached.
                {
                    if(v[l]==1)
                        l++;
                    else if(v[l]==0)
                        l++,cnt--;
                }
                ans=max(ans,r-l+1);
                r++;
            }
        }
        return ans;
    }
};

Solution 2:
We take two counters leftcount and rightcount,which represents no. of zeroes in left of a "0"(including zero itself for flipping) and right of a "0".
When we encounter a 1 that means that can be appended to the existing sequence,so rightcount++.
When we encounter a zero then the the rightcount becomes leftcount and one flipping so leftcount = rightcount+1.
This can be used in the follow-up.
class Solution {
public:
    int findMaxConsecutiveOnes(vector<int> &v) 
    {
        int n=v.size();
        int ans=0,leftcnt=0,rightcnt=0;
        for(int i=0;i<n;i++)
        {
            if(v[i]==1)
                rightcnt++;
            else if(v[i]==0)
            {
                leftcnt=rightcnt+1;
                rightcnt=0;
            }
            ans=max(ans,leftcnt+rightcnt);
        }
    return ans;
    }
};
Solution 3:
For the follow-up we can generalise to K flips.
class Solution {
public:
    int findMaxConsecutiveOnes(vector<int> &v) 
    {
        int n=v.size();
        int left=0,right=0,ans=0,k=1;
        queue<int> q;
        for(int i=0;i<n;i++)
        {
            if(v[i]==1)
                right=i;
            else if(v[i]==0)
            {
                q.push(i);
                if(q.size()>k)
                {
                    left=q.front()+1;
                    q.pop();
                }
            }
            ans=max(ans,right-left+1);
        }
    return ans;
    }
};
