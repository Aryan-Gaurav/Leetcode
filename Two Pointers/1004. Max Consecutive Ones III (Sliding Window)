Problem Link:
https://leetcode.com/problems/max-consecutive-ones-iii/
https://www.interviewbit.com/problems/maximum-ones-after-modification/

Description:
Given an array A of 0s and 1s, we may change up to K values from 0 to 1.

Return the length of the longest (contiguous) subarray that contains only 1s.
Follow up:
What if the input numbers come in one by one as an infinite stream? In other words, you can't store all numbers coming from the stream as 
it's too large to hold in memory.Could you solve it efficiently?

Code:
Solution 1:
Use sliding window technique.Here window can grow and shrink in size according to number of zeroes in it

int Solution::solve(vector<int> &v, int k) 
{
   int n=v.size();
    int ans=0,l=0,r=0,cnt=0;
    while(r<n)
    {
        if(v[r]==1) //the configuration of l and r now is valid so calculate its width.
            ans=max(ans,r-l+1),r++;
        else if(v[r]==0)
        {
            cnt++;
            while(l<=r && cnt>k)  //if cnt>k then the current configuration is not valid,make it valid by shifting left pointer
            {
                if(v[l]==1)
                    l++;
                else if(v[l]==0)
                    l++,cnt--;
            }
            ans=max(ans,r-l+1);
            r++;
        }
    }
    return ans;
}

Solution 2:(Follow up using Queue)
When the input stream is continuous.We use a queue to store indices of zeroes encountered.
class Solution {
public:
    int longestOnes(vector<int>& v, int k) 
    {
        int n=v.size();
        int left=0,right=0,ans=0;
        queue<int> q;
        while(right<n)
        {
            if(v[right]==0)
            {
                q.push(right);
                if(q.size()>k)
                {
                    left=q.front()+1;
                    q.pop();
                }
            }
            ans=max(ans,right-left+1);
            right++;
        }
    return ans;
    }
};
