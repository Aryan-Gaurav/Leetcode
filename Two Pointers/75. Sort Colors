Problem Link:
https://leetcode.com/problems/sort-colors/
https://www.interviewbit.com/problems/sort-by-color/

Description:
Given an array with n objects colored red, white or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red,
white and blue.

Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.

Note: You are not suppose to use the library's sort function for this problem.

Example:

Input: [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
Follow up:

A rather straight forward solution is a two-pass algorithm using counting sort.
First, iterate the array counting number of 0's, 1's, and 2's, then overwrite array with total number of 0's, then 1's and followed by 2's.
Could you come up with a ### one-pass ### algorithm using only constant space?

Code:
Solution 1:
Using two pointers left and right where left denotes the position where next 0 is to be inserted and right denotes the position where 
next 2 is to be inserted. i denotes the current element.

void Solution::sortColors(vector<int> &v) 
{
    int n=v.size();
    int left=0,right=n-1;
    int i=0;
    while(i<=right)
    {
        if(v[i]==0) //if its zero then swap this left and left must must be 1 so i++
        {
            swap(v[i],v[left]);
            i++;
            left++;
        }
        else if(v[i]==1) //its one then its ok
        {
            i++;
        }
        else if(v[i]==2) //if its 2 then it must go to right and right-- and the element which comes next must be checked.
        {
            swap(v[right],v[i]);
            right--;
        }
    }
}

