Problem Link:
https://leetcode.com/problems/combination-sum-iii/

Description:
Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and 
each combination should be a unique set of numbers.

Note:

All numbers will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: k = 3, n = 7
Output: [[1,2,4]]
Example 2:

Input: k = 3, n = 9
Output: [[1,2,6], [1,3,5], [2,3,4]]

Code:
Solution 1:
We do it as combination sum I but with an added constraint of using exactly k elements.
class Solution {
public:
    vector<vector<int>> ans;
    vector<int> temp;
    void backtrack(vector<int> &v,int idx,int rem,int currsum,int tar)
    {
        if(rem==0 and currsum==tar)
        {
            ans.push_back(temp);
            return;
        }
        if(currsum>=tar or rem<0)
            return;
        for(int i=idx;i<9;i++)
        {
            temp.push_back(v[i]);
            backtrack(v,i+1,rem-1,currsum+v[i],tar);
            temp.pop_back();
        }
    }
    vector<vector<int>> combinationSum3(int k, int n) 
    {
        vector<int> v={1,2,3,4,5,6,7,8,9};
        backtrack(v,0,k,0,n);
        return ans;
    }
};
