Problem Link:
https://leetcode.com/problems/combination-sum/

Description:
Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in 
candidates where the candidate numbers sums to target.

The same repeated number may be chosen from candidates unlimited number of times.

Note:

All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: candidates = [2,3,6,7], target = 7,
A solution set is:
[
  [7],
  [2,2,3]
]
Example 2:

Input: candidates = [2,3,5], target = 8,
A solution set is:
[
  [2,2,2,2],
  [2,3,3],
  [3,5]
]
 

Constraints:

1 <= candidates.length <= 30
1 <= candidates[i] <= 200
Each element of candidate is unique.
1 <= target <= 500

Code:
Solution 1:
Watch the constraints carefully you will observe less size of array.
Since here we can use same element more than once we recurse for i(rather than i+1).We compare the currsum which is sum of elements present in temp array.If we 
found the target then push temp in ans array.

class Solution {
public:
    vector<vector<int>> ans;
    vector<int> temp;
    void backtrack(vector<int> &v,int currsum,int idx,int tar)
    {
        if(currsum>tar)
            return;
        if(currsum==tar)
        {
            ans.push_back(temp);
            return;
        }
        for(int i=idx;i<v.size();i++)
        {
            temp.push_back(v[i]);
            backtrack(v,currsum+v[i],i,tar);
            temp.pop_back();
        }
    }
    vector<vector<int>> combinationSum(vector<int>& v, int tar) 
    {
        backtrack(v,0,0,tar);
        return ans;
    }
};
