Problem Link:
https://leetcode.com/problems/permutations/

Description:
Given a collection of distinct integers, return all possible permutations.

Example:

Input: [1,2,3]
Output:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]

Code:
Solution 1:
Basic idea is to use a visited array to mark if a given element has been visited.We loop front starting element and if its not visited then we mark it visited 
and push in temp array and call the function again.After coming back we reset vis to 0 for next permuations to be generated.
class Solution {
public:
    vector<vector<int>> ans;
    vector<int> temp;
    void backtrack(vector<int> &v,vector<bool> &vis)
    {
        if(temp.size()==v.size()) //base condition that all the elements have been visited
        {
            ans.push_back(temp);
            return;
        }
        for(int i=0;i<v.size();i++)
        {
            if(!vis[i])
            {
                vis[i]=1;
                temp.push_back(v[i]);
                backtrack(v,vis);
                temp.pop_back();
                vis[i]=0;
            }
        }
    }
    vector<vector<int>> permute(vector<int> &v) 
    {
        int n=v.size();
        vector<bool> vis(n,0);
        backtrack(v,vis);
        return ans;
    }
};
