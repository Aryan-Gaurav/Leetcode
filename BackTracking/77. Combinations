Problem Link:
https://leetcode.com/problems/combinations/

Description:
Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.

Example:

Input: n = 4, k = 2
Output:
[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]

Code:
Solution 1:
Idea is similar to subset generation.We always iterate in forward direction to avoid duplicate combinations.
class Solution {
public:
    vector<vector<int>> ans;
    vector<int> temp;
    void backtrack(vector<int> &v,int rem,int idx)
    {
        if(rem==0)
        {
            ans.push_back(temp);
            return;
        }
        for(int i=idx;i<=v.size()-rem;i++)  //v.size()-rem because going more that that is not going to yield me answer.
        {
            temp.push_back(v[i]);
            backtrack(v,rem-1,i+1);
            temp.pop_back();
        }
    }
    vector<vector<int>> combine(int n, int k) 
    {
        vector<int> v;
        for(int i=1;i<=n;i++)
            v.push_back(i);
        backtrack(v,k,0);
        return ans;
    }
};
