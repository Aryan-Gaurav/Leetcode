Problem Link:
https://leetcode.com/problems/next-greater-element-i/

Description:
You are given two arrays (without duplicates) nums1 and nums2 where nums1â€™s elements are subset of nums2. Find all the next greater numbers for nums1's 
elements in the corresponding places of nums2.

The Next Greater Number of a number x in nums1 is the first greater number to its right in nums2. If it does not exist, output -1 for this number.

Example 1:
Input: nums1 = [4,1,2], nums2 = [1,3,4,2].
Output: [-1,3,-1]
Explanation:
    For number 4 in the first array, you cannot find the next greater number for it in the second array, so output -1.
    For number 1 in the first array, the next greater number for it in the second array is 3.
    For number 2 in the first array, there is no next greater number for it in the second array, so output -1.
    
Code:
Solution 1:
Find NGE of nums2 using stack and store in unordered map.Finally form the ans array.
For finding NGE to right we push the numbers until the top elemnt is greater than equal to current element, as soon as we encounter  a greater element we start
poping the top element till the top is smaller and its answer is the current element.Here aslo we maintain a monotonic decreasing stack.

class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& a, vector<int>& v) 
    {
        if(a.empty() or v.empty())
            return {};
        stack<int> stk;
        unordered_map<int,int> nge;
        for(int i=0;i<v.size();i++)
        {
            while(!stk.empty() and v[i]>v[stk.top()])
            {
                nge[v[stk.top()]]=v[i];
                stk.pop();
            }
            stk.push(i);
        }
        while(!stk.empty())
        {
            nge[v[stk.top()]]=-1;
            stk.pop();
        }
        vector<int> ans;
        for(auto x:a)
            ans.push_back(nge[x]);
        return ans;
    }
};
