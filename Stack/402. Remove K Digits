Problem Link:
https://leetcode.com/problems/remove-k-digits/

Description:
Given a non-negative integer num represented as a string, remove k digits from the number so that the new number is the smallest possible.

Note:
The length of num is less than 10002 and will be â‰¥ k.
The given num does not contain any leading zero.
Example 1:

Input: num = "1432219", k = 3
Output: "1219"
Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.
Example 2:

Input: num = "10200", k = 1
Output: "200"
Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.

Code:
Solution 1:
O(K*N) time complexity.
Here the main idea is to remove the first element from left which is peak and delete it.

class Solution {
public:
    string removeKdigits(string s, int k) 
    {
        if(s.size()<=k)
            return "0";
        int temp=k;
        for(int j=0;j<temp;j++)
        {
            int i = 0;
            while (i+1<s.size() && s[i]<=s[i+1])  i++;  //stops when a peak is found(dont implement as removing all peaks in one go,as removing on peak may create
            s.erase(s.begin()+i);                       // new peak there only, and might result  in non-optimal answer)
            k--;
        }
        while(s.size()>1 and s[0]=='0')
            s.erase(s.begin());
        return s;
    }
};

Solution 2:
O(N) time soltion(STACK)
Idea of using a stack strikes due to the fact that when we make a graph of elements of the number,we want to remove such elemnts who have lower value(dip) 
on its right.After removing that element if the dip donot vanish then again delete the peak and so on.Basically we want all the numbers to be in increasing order
so for this we maintain a stack.

We maintain a montonic increasing stack and as soon as we encounter a number which is less that stack.top() we pop elements until the top is greater than current
number(this means we are removing those digits from nmber to make it least).In this way we traverse till end of string.After it if K is non-zero that means we have
a incresing sequence of numbers and we need to remove last K digits from it.After all this is done,Just form the new number.

class Solution {
public:
    string removeKdigits(string s, int k) 
    {
        if(s.size()<=k)
            return "0";
        stack<char> stk;
        for(int i=0;i<s.size();i++)
        {
            while(!stk.empty() and stk.top()>s[i] and k>0)  //we have encounterd a smaller no. than top and we need to remove the stack.top() to form smaller no.
            {
                stk.pop();
                k--;
            }
            stk.push(s[i]);
        }
        while(k>0)
        {
            stk.pop();
            k--;
        }
        string ans="";
        while(!stk.empty())
        {
            ans=stk.top()+ans;
            stk.pop();
        }
        while(ans.size()>1 and ans[0]=='0')
            ans.erase(ans.begin());
        return ans;
    }
};
