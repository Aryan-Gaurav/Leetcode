Problem Link:
https://leetcode.com/problems/min-stack/

Description:
Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.
 

Example 1:

Input
["MinStack","push","push","push","getMin","pop","top","getMin"]
[[],[-2],[0],[-3],[],[],[],[]]

Output
[null,null,null,null,-3,null,0,-2]

Explanation
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin(); // return -3
minStack.pop();
minStack.top();    // return 0
minStack.getMin(); // return -2
 

Constraints:

Methods pop, top and getMin operations will always be called on non-empty stacks.

Code:
Brute-Force type solution is to use the one more stack to pop all the elements when getmin is called.O(N) for getmin.

Solution 1:
Using Two stacks.
One stack is used normally and another monotonic decreasing stack is used to keep track of the min element.

Every operation is O(1).
class MinStack {
private:
    stack<int> stk,mstk;  //mstk is used to maintian the min element
public:
    /** initialize your data structure here. */
    
    MinStack() 
    {
        mstk.push(INT_MAX); //so that comparison can be made for first element
    }
    
    void push(int x) 
    {
        stk.push(x);
        if(x<=mstk.top())   // we use equal sign to take in account multiple occurences of same element
            mstk.push(x);   //push the current element if its a potential min element for next coming elements
    }
    
    void pop() 
    {
        auto temp=stk.top();
        stk.pop();
        if(temp==mstk.top())  //pop the current element if it is min element beacuse it doesn't exist anymore 
            mstk.pop();
    }
    
    int top() 
    {
        return stk.top();
    }
    
    int getMin() 
    {
        return mstk.top();
    }
};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack* obj = new MinStack();
 * obj->push(x);
 * obj->pop();
 * int param_3 = obj->top();
 * int param_4 = obj->getMin();
 */
 
 Solution 2:
 Using ONE Stack.
 If you are not allowed to use two stacks the use the past min element as delimiter if current element is minimum element.
 
class MinStack {
private:
    stack<int> stk;
    int min_el;
public:
    /** initialize your data structure here. */
    
    MinStack() 
    {
      min_el=INT_MAX; //intialise the current min as infinty
    }
    
    void push(int x) 
    {
        if(x<=min_el)   //push the previous min element for updation when the current element is popped off.
        {
            stk.push(min_el);
            min_el=x;   //update the min element
        }
        stk.push(x);
    }
    
    void pop() 
    {
        auto temp=stk.top();
        stk.pop();
        if(temp==min_el)  //
        {
            min_el=stk.top();
            stk.pop();
        }
    }
    
    int top() 
    {
        return stk.top();
    }
    
    int getMin() 
    {
        return min_el;
    }
};
Solution 3:
If you need to implement it from scratch the do it dynamically using linked list.
class node
{
    public:
    int val;
    node* next;
    node(){}
    node(int x)
    {
        this->val=x;
        this->next=NULL;
    }
    node(int x,node* nxt)
    {
        this->val=x;
        this->next=nxt;
    }
};
class MinStack {
private:
    node *head;
    int min_el;
public:
    /** initialize your data structure here. */
    
    MinStack() 
    {
        head=NULL;
        min_el=INT_MAX;
    }
    
    void push(int x) 
    {
        if(x<=min_el)
        {
            head= new node(min_el,head);
            min_el= x;
        }
         head= new node(x,head);
        
    }
    
    void pop() 
    {
        if(head->val!=min_el)
        {
            auto t=head;
            head=head->next;
            delete(t);
        }
        else
        {
            auto t=head;
            min_el=head->next->val;
            head=head->next;
            delete(t);
            t=head;
            head=head->next;
            delete(t);
        }
    }
    
    int top() 
    {
        return head->val;
    }
    
    int getMin() 
    {
        return min_el;
    }
};
