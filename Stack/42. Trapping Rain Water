Problem Link:
https://leetcode.com/problems/trapping-rain-water/

Description:
Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.


The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.

Example:

Input: [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6

Code:
Solution 1:
DP solution
We try to extend a bar till highest bar in left and highest bar in right.These 2 bars acts as barriers of two sides of container.We pre-calculate the values 
in an array,then the area contributed by the bar will be min(left_bar and right_bar) - height of bar(as water can't be held with one of sides lower than other).
We add contribution of each bar.

class Solution {
public:
    int trap(vector<int>& v) 
    {
        int n=v.size();
        vector<int> left_max(n),right_max(n);
        int val=INT_MIN;
        int ans=0;
        for(int i=0;i<n;i++)
        {
            val=max(val,v[i]);
            left_max[i]=val;
        }
        val=INT_MIN;
        for(int i=n-1;i>=0;i--)
        {
            val=max(val,v[i]);
            right_max[i]=val;
        }
        for(int i=0;i<n;i++)
        {
            int temp=min(left_max[i],right_max[i])-v[i];
            ans+=temp;
        }
        return ans;
    }
};

Solution 2:
TWO Pointers
Instead of pre-computing an array for left and right indices, we take two left and right pointers and try to pour water from higher side(because water which can
be stored is always bounded by less height bar).We the update left_max and right_max if it can be updated else calculate the contribution due to smaller bars.
We stop when left and right meet.

class Solution {
public:
    int trap(vector<int>& v) 
    {
        int n=v.size();
        int ans=0;
        int left=0,right=n-1;
        int left_max=-1e9,right_max=-1e9;
        while(left<=right)
        {
            if(v[left]<=v[right]) //this means how much water is to be stored is decided by left bar
            {
                if(left_max<v[left])  //this means current left is going to be new left wall
                    left_max=v[left];
                else ans+=left_max-v[left]; //it already has higher bar than itself in its left so calculate its contribution
                left++;
            }
            else
            {
                if(right_max<v[right])
                    right_max=v[right];
                else ans+=right_max-v[right];
                right--;
            }
        }
        return ans;
    }
};

Solution 3:
Same idea can be simulated by a stack but in a different way it builds up the answer.
We maintain a monotonic stack of decreasing heights.As soon as current height becomes greater than  stk.top() that means now the bar can contribute area to the
ans.We calculte the area contributed as horizontal srtips between current bar and the previous bar in stack by formula widht*(min(height of current bar i.e right
boundary and previous bar ie left boundary)-height of popped bar.

class Solution {
public:
    int trap(vector<int>& v) 
    {
        int n=v.size();
        int ans=0;
        stack<int> stk;
        int i=0;
        while(i<n)
        {
            while(!stk.empty() and v[i]>v[stk.top()]) //the current bar can become right boundary
            {
                auto t=stk.top(); //the bar which will contribute
                stk.pop();
                if(!stk.empty())  //if stack is empty then no left boundary so no contribution
                    ans+=(min(v[i],v[stk.top()])-v[t])*(i-stk.top()-1);
            }
            stk.push(i);
            i++;
        }
        return ans;
    }
};
