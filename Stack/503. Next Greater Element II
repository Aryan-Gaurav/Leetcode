Problem Link:
https://leetcode.com/problems/next-greater-element-ii/

Description:
Given a circular array (the next element of the last element is the first element of the array), print the Next Greater Number for every element.
The Next Greater Number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly 
to find its next greater number. If it doesn't exist, output -1 for this number.

Example 1:
Input: [1,2,1]
Output: [2,-1,2]
Explanation: The first 1's next greater number is 2; 
The number 2 can't find next greater number; 
The second 1's next greater number needs to search circularly, which is also 2.
Note: The length of given array won't exceed 10000.

Solution 1:
We traverese the array two times with same concept in mind but this helps in going back to the front element and checking it for the last element.
You can run 2 loops for n or 1 loop for 2*n.
class Solution {
public:
    vector<int> nextGreaterElements(vector<int>& v) 
    {
        int n=v.size();
        stack<int> stk;
        vector<int> nge(n,-1);
        for(int i=0;i<2*n;i++)
        {
            while(!stk.empty() and v[i%n]>v[stk.top()])
                nge[stk.top()]=v[i%n],stk.pop();
            stk.push(i%n);
        }
        while(!stk.empty())
            stk.pop();
        return nge;
    }
};
