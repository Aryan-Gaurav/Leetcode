Problem Link:https://leetcode.com/problems/path-sum-ii/

Description:

Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

Note: A leaf is a node with no children.

Example:

Given the below binary tree and sum = 22,

      5
     / \
    4   8
   /   / \
  11  13  4
 /  \    / \
7    2  5   1
Return:

[
   [5,4,11,2],
   [5,8,4,5]
]

Code:
Solution 1:
class Solution {
public:
    vector<vector<int>> check(TreeNode *root,int tar)
    {
        if(root==NULL)
            return {};
        if(root->left==NULL and root->right==NULL)
        {
            if(tar==root->val)
                return {{root->val}};
            else return{};
        }
        auto l=check(root->left,tar-root->val);
        auto r=check(root->right,tar-root->val);
        vector<vector<int>> temp;
        if(!l.empty())
        {
            for(int i=0;i<l.size();i++)
            {
                l[i].push_back(root->val);
                temp.push_back(l[i]);
            }
        }
        if(!r.empty())
        {
            for(int i=0;i<r.size();i++)
            {
                r[i].push_back(root->val);
                temp.push_back(r[i]);
            }
        }
        return temp;
    }
    vector<vector<int>> pathSum(TreeNode* root, int sum) 
    {
        auto ans=check(root,sum);
        for(int i=0;i<ans.size();i++)
            reverse(ans[i].begin(),ans[i].end());
        return ans;
    }
};
