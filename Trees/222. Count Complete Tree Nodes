Problem Link:
https://leetcode.com/problems/count-complete-tree-nodes/

Description:
Given a complete binary tree, count the number of nodes.

Note:

Definition of a complete binary tree from Wikipedia:
In a complete binary tree every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. 
It can have between 1 and 2h nodes inclusive at the last level h.(start populating from left).

Code:

Solution 1:
O(N) solution
Just count the number of nodes normally with the help of a helper function.

class Solution {
public:
    int helper(TreeNode* root)
    {
        int count=0;
        if(root==NULL)
            return 0;
        if(root->left==NULL and root->right==NULL)
            return 1;
        count=helper(root->left)+helper(root->right)+1;
        return count;
    }
    int countNodes(TreeNode* root) 
    {
     return helper(root);
    }
};

Solution 2:
O((Lg n)*(Lg n)) solution

Realise that you never used the fact of complete binary tree.Use it.
