Problem Link:
https://leetcode.com/problems/same-tree/

Description:
Given two binary trees, write a function to check if they are the same or not.

Two binary trees are considered the same if they are structurally identical and the nodes have the same value.

Example 1:

Input:     1         1
          / \       / \
         2   3     2   3

        [1,2,3],   [1,2,3]

Output: true
Example 2:

Input:     1         1
          /           \
         2             2

        [1,2],     [1,null,2]

Output: false
Example 3:

Input:     1         1
          / \       / \
         2   1     1   2

        [1,2,1],   [1,1,2]

Output: false

Code:
Solution 1:
Just check corresponding nodes and recurse for two childs.
class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) 
    {
        if(p==NULL or q==NULL)
            return p==q;
        return (p->val==q->val) and isSameTree(p->left,q->left) and isSameTree(p->right,q->right);
    }
};

Solution 2:
Iteratively
Just do level-order traversal using queue and check each time
