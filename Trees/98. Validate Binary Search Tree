Problem Link:- https://leetcode.com/problems/validate-binary-search-tree/

Problem Statement:-

Given the root of a binary tree, determine if it is a valid binary search tree (BST).

A valid BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
 

Example 1:


Input: root = [2,1,3]
Output: true

Solution 1:-
Checking if left value is less than current and right is more than current is not alone sufficient.
All values in left must be smaller and all values in right must be greater. So for each node check for left subtree and right subtree condtion of elements.
Time Complexity is O(N*N)

 bool help(TreeNode *root, bool isleft,int x)
    {
        if(root==NULL)
            return 1;
        if(isleft)
        {
            if(root->val >= x)
                return 0;
        }
        else
        {
            if(root->val <= x)
                return 0;
        }
        return help(root->left,isleft,x) && help(root->right,isleft,x);
    }
    bool isValidBST(TreeNode* root) 
    {
        if(root==NULL)
                return 1;
        int x=root->val;
        bool ans=1;
        ans&=help(root->left,1,x);
        ans&=help(root->right,0,x);
        return ans && isValidBST(root->left) && isValidBST(root->right);
    }
};

SOlution 2:
Do the inorder traversal of BST and then check if its valid or not.
Time O(N) and space is O(N).

class Solution {
public:
    vector<int> v; 
    void helper(TreeNode *root)
    {
        if(root==NULL)
            return;
        helper(root->left);
        v.push_back(root->val);
        helper(root->right);
    }
    bool isValidBST(TreeNode* root) 
    {
       helper(root);
        for(int i=0;i<v.size()-1;i++)
            if(v[i]>=v[i+1])
                return 0;
        return 1;
    }
};

Solution 3:
This is quite elegant code.At each node we pass the nodes which must be boundary for current node i.e which values it can take.


class Solution {
public:
    bool helper(TreeNode *root,TreeNode *min_node,TreeNode *max_node)
    {
        if(root==NULL)
            return 1;
        if(min_node && root->val <= min_node->val)  //if we have a min_node that means current value must be greater than that
            return 0;
        if(max_node && root->val >= max_node->val)  //if we have a max_node that means current value must be smaller than that
            return 0;
        return helper(root->left,min_node,root) && helper(root->right,root,max_node);
    }   //                         |-->for left subtree max_node changes to current
    bool isValidBST(TreeNode* root) 
    {
      return helper(root,NULL,NULL);
    }
};
