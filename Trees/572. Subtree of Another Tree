Problem Link:
https://leetcode.com/problems/subtree-of-another-tree/

Description:
Given two non-empty binary trees s and t, check whether tree t has exactly the same structure and node values with a subtree of s. A subtree of s is a tree consists of a node in s and all of this node's descendants. The tree s could also be considered as a subtree of itself.

Example 1:
Given tree s:

     3
    / \
   4   5
  / \
 1   2
Given tree t:
   4 
  / \
 1   2
Return true, because t has the same structure and node values with a subtree of s.
 

Example 2:
Given tree s:

     3
    / \
   4   5
  / \
 1   2
    /
   0
Given tree t:
   4
  / \
 1   2
Return false.

Code:
Solution 1: O(|S|*|T|)
class Solution {
public:
    bool issame(TreeNode *p,TreeNode *q)
    {
        if(p==NULL or q==NULL)
            return p==q;
        if(p->val!=q->val)
            return 0;
        return issame(p->left,q->left) and issame(p->right,q->right);
    }
    bool isSubtree(TreeNode* s, TreeNode* t) 
    {
        if(s==NULL or t==NULL)
            return s==t;
        if(s->val==t->val)
        {
            return issame(s,t) or isSubtree(s->left,t) or isSubtree(s->right,t);
        }
         return isSubtree(s->left,t) or isSubtree(s->right,t);
    }
};
