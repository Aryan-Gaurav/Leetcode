Problem Link:
https://leetcode.com/problems/binary-tree-right-side-view/

Description:
Given a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.

Example:

Input: [1,2,3,null,5,null,4]
Output: [1, 3, 4]
Explanation:

   1            <---
 /   \
2     3         <---
 \     \
  5     4       <---
  
Code:

Solution 1:
Iterative solution using O(N) extra space.Space can be made to O(1) by using a curr variable to store the latest discovered value at a level.  
vector<int> Solution::solve(TreeNode* root) 
{
    vector<vector<int>> temp;
    queue<TreeNode*> q;
    q.push(root);
    while(!q.empty())
    {
        int n=q.size();
        vector<int> aa;
        for(int i=0;i<n;i++)
        {
            auto t=q.front();
            q.pop();
            if(t!=NULL)
            {
                aa.push_back(t->val);
                if(t->left!=NULL)
                    q.push(t->left);
                if(t->right!=NULL)
                    q.push(t->right);
            }
        }
        if(aa.size())
            temp.push_back(aa);
    }
    vector<int> ans;
    for(int i=0;i<temp.size();i++)
        ans.push_back(temp[i].back());
    return ans;
}

Solution 2:
Using Recursion
Just do same as pre-order traversal instead go for right node first then do for left node. 

vector<int> ans;
 void helper(TreeNode *root,int level)
 {
     if(root==NULL)
        return;
    if(level>ans.size())      //check if the current level has laready been explored
        ans.push_back(root->val);
    helper(root->right,level+1);
    helper(root->left,level+1);
 }
vector<int> Solution::solve(TreeNode* root) 
{
    ans.clear();
    helper(root,1);  
    return ans;
}
