Problem Link:

Description:
Given a binary tree, flatten it to a linked list in-place.

For example, given the following tree:

    1
   / \
  2   5
 / \   \
3   4   6
The flattened tree should look like:

1
 \
  2
   \
    3
     \
      4
       \
        5
         \
          6

Code:
Soution 1:
Recursive
Idea is to keep a prev pointer and intialise it as NULL.When ever we encounter a node if prev is NULL the make this node as prev and call the function for left
subtree and right subtree(Just analogous to pre-order taversal).If prev is not NULL then it means the current node must be put to right pointer of prev and left
of previous is made NULL.Before calling function for left and right subtree save the pointer to right subtree as it may be altered in the flattening process.

class Solution {
public:
    TreeNode *prev=NULL;
    void flatten(TreeNode* root) 
    {
        if(root==NULL)
            return;
        if(prev==NULL)
            prev=root;
        else
        {
            prev->right=root;
            prev->left=NULL;
            prev=root;
        }
        auto t=root->right; //save pointer to right node as you may loose acess to it
        flatten(root->left);
        flatten(t);
    }
};

Solution 2:
Iterative.
Here we use a stack an keep a prev pointer intialised as NULL.We pop an elememt from stack and before doing any kind of updation/flattening we push its 
right child followed by left child.After pushing the child,we perform updates on prev pointer as above. 
class Solution {
public:
    
    void flatten(TreeNode* root) 
    {
        TreeNode *prev=NULL;
        if(root==NULL)
            return;
        stack<TreeNode*> stk;
        stk.push(root);
        while(!stk.empty())
        {
            auto t=stk.top();
            stk.pop();
            if(t->right)
                stk.push(t->right);
            if(t->left)
                stk.push(t->left);
            if(prev==NULL)
                prev=t;
            else 
            {
                prev->right=t;
                prev->left=NULL;
                prev=t;
            }
        }
    }
};
