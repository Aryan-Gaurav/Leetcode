Problem Link https://leetcode.com/problems/search-a-2d-matrix/

Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:
1.Integers in each row are sorted from left to right.
2.The first integer of each row is greater than the last integer of the previous row.

Code:
Solution 1:O(lg(mn)) or O(lg n + lg m)
Treat as simple 1D array which is sorted.
int Solution::searchMatrix(vector<vector<int> > &v, int val) 
{
    int n=v.size(),m=v[0].size();
    int low=0,high=m*n-1;
    while(low<=high)
    {
        int mid=(low+high)/2;
        if(v[mid/m][mid%m]==val)
            return 1;
        if(v[mid/m][mid%m]<val)
            low=mid+1;
        else high=mid-1;
    }
    return 0;
}
Solution 2:
First try to find the row whose 1st element is just smaller than val.
int Solution::searchMatrix(vector<vector<int> > &v, int val) 
{
    int n=v.size(),m=v[0].size();
    int low=0,high=n-1;
    while(low<high) //this is some what modified version of binary search(no equal to sign)
    {
        int mid=(low+high+1)/2; // this done for when the low and high are 1 unit apart then low is definetly the ans but we want to check for high
        if(v[mid][0]==val)
            return 1;
        if(v[mid][0]>val)       //if the value at mid is greater then its obviously not the ans
            high=mid-1;
        else low=mid;           // but if the value is less then it may be the ans.
    }
    int row=low;
    low=0,high=m-1;
    while(low<=high)
    {
        int mid=(low+high)/2;
        if(v[row][mid]==val)
            return 1;
        if(v[row][mid]<val)
            low=mid+1;
        else high=mid-1;
    }
    return 0;
}

