Problem Link 
https://leetcode.com/problems/search-in-rotated-sorted-array/
https://www.interviewbit.com/problems/rotated-sorted-array-search/

Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.
You are given a target value to search. If found in the array return its index, otherwise return -1.
You may assume no duplicate exists in the array.

Code:
Solution 1:First find the pivot then perform binary search.in one of the parts v[0]<=v[mid] will always hold true.

class Solution {
public:
    int search(vector<int> &v, int tar) 
    {
        if(v.empty())
            return -1;
        int n=v.size();
        int lo=0,hi=n-1;
        if(v[0]<v[n-1]) //base case when array is slready sorted
            lo=0;
        else
        {
            while(lo<=hi)
            {
                int mid=(lo+hi)/2;
                if(v[0]<=v[mid])
                    lo=mid+1;
                else hi=mid-1;
            }
        }
        int idx=lo;
        lo=0,hi=idx-1;
        while(lo<=hi)
        {
            int mid=(lo+hi)/2;
            if(v[mid]==tar)
                return mid;
            if(v[mid]<tar)
                lo=mid+1;
            else hi=mid-1;
        }
        lo=idx,hi=n-1;
        while(lo<=hi)
        {
            int mid=(lo+hi)/2;
            if(v[mid]==tar)
                return mid;
            if(v[mid]<tar)
                lo=mid+1;
            else hi=mid-1;
        }
        return -1;
    }
};

Solution 2:-
Using only one Binary search.
The main idea is to look mid is in which part of array,left part or right part and then check whether our taget is in left part or right part and accordingly 
shift the low and high.

class Solution {
public:
    int search(vector<int> &v, int target) 
    {
        int n=v.size();
        int lo=0,hi=n-1;
        int start=v[0];
        while(lo<=hi)
        {
            int mid=(lo+hi)/2;
            if(v[mid]==target)
                return mid;
            bool is_big = start<=target;    //if true then the target is in left part of rotated array else in right part
            bool is_where = start<=v[mid];  // if true that means mid is in left part of rotated array else in right part
            if(is_big==is_where)    //both are in same part of array
            {
                if(v[mid]<target)
                    lo=mid+1;
                else hi=mid-1;
            }
            else                        // both are in different parts of array
            {
                if(v[mid]<target)       //we are in right part and target is in left part
                    hi=mid-1;
                else lo=mid+1;          // we are in left part and target is in right part
            }
        }
        return -1;
    }
};
