Problem Link: https://leetcode.com/problems/search-a-2d-matrix-ii/

Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:
Integers in each row are sorted in ascending from left to right.
Integers in each column are sorted in ascending from top to bottom.

Code:
Solution 1:O(N lg M)
class Solution {
public:
bool searchMatrix(vector<vector<int>> &v,int val)
{
    if(v.empty()) return 0;
    int n=v.size(),m=v[0].size();

    for(int i=0;i<n;i++)
    {
        int low=0,high=m-1;
        while(low<=high)
        {
            int mid=(low+high)/2;
            if(v[i][mid]==val)
                return 1;
            if(v[i][mid]<val)
                low=mid+1;
            else high=mid-1;
        }
    }
    return 0;
}
};
Solution 2: O(N+M)
class Solution {
public:
bool searchMatrix(vector<vector<int>> &v,int val)
{
    if(v.empty()) return 0;
    int n=v.size(),m=v[0].size();
    int i=0,j=m-1;
    while(i<n && j>=0)
    {
        if(v[i][j]==val)
            return 1;
        if(v[i][j]>val)
            j--;
        else if(v[i][j]<val)
            i++;
    }
    return 0;
}
};
