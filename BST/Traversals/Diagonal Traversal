Problem Link:
https://www.interviewbit.com/problems/diagonal-traversal/

Description:
Consider lines of slope -1 passing between nodes.

Given a Binary Tree A containing N nodes, return all diagonal elements in a binary tree belonging to same line.

NOTE:

See Sample Explanation for better understanding.
Order does matter in the output.
To get the same order as in the output traverse the tree same as we do in pre-order traversal.
Input :

             11
          /     \
         20      12
        / \       \
       1   15      13
          /  \     /
         2    17  16
          \   /
          22 34


Example Output
Output :

 [11, 12, 13, 20, 15, 17, 16, 1, 2, 22, 34]

Code:
Solution 1:Using Recursion

 map<int , vector<int>> mp;
 void helper(TreeNode *root,int n)
 {
     if(root==NULL)
        return;
    mp[n].push_back(root->val);
    helper(root->left,n+1);  //we first call left child to avoid confusion of overlapping and being printed before the element of left sub-tree 
    helper(root->right,n);
 }
vector<int> Solution::solve(TreeNode* root) 
{
    mp.clear();
    helper(root,0);
    vector<int> ans;
    for(auto itr:mp)
    {
        for(auto x:itr.second)
            ans.push_back(x);
    }
    return ans;
}

Solution 2:
Iterative using queue.
Idea is to use a delimiter(NULL) to mark the starting and end of a diagonal.When we encounter a node, we explore its right node and push the left node
(for next diagonal, it must be NOT NULL) in queue.As soon as the element is popped and front of queue is NULL we know that the current diagonal has ended
and the nodes for generating next diagonal is in the queue we just push NULL in back to mark end of the incoming diagonal.We also increase the counter 
of diagonal number.For generating the 1st diagonal, we need only root so push root then NULL.

vector<int> Solution::solve(TreeNode* root) 
{
    map<int , vector<int>> mp;
    int i=0;
    queue<TreeNode*> q;
    q.push(root);
    q.push(NULL);
    while(!q.empty())
    {
        auto t=q.front();
        q.pop();
        if(!q.empty())
        {
            if(q.front()==NULL)
            {
                q.push(NULL);
                i++;
                q.pop();
            }
        }
        if(t!=NULL)
        {
           while(t!=NULL)
           {
               mp[i].push_back(t->val);
               if(t->left)    //check so that the node is valid for generating the next diagonal
               q.push(t->left);
               t=t->right;
           }
        }
    }
    vector<int> ans;
    for(auto itr:mp)
    {
        for(auto x:itr.second)
            ans.push_back(x);
    }
    return ans;
}
