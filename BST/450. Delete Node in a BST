Problem Link:
https://leetcode.com/problems/delete-node-in-a-bst/

Description:
Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.

Basically, the deletion can be divided into two stages:

Search for a node to remove.
If the node is found, delete the node.
Note: Time complexity should be O(height of tree).

Example:

root = [5,3,6,2,4,null,7]
key = 3

    5
   / \
  3   6
 / \   \
2   4   7

Given key to delete is 3. So we find the node with value 3 and delete it.

One valid answer is [5,4,6,2,null,null,7], shown in the following BST.

    5
   / \
  4   6
 /     \
2       7

Another valid answer is [5,2,6,null,4,null,7].

    5
   / \
  2   6
   \   \
    4   7

Code:
Solution 1:
Recursive solution is to find the target node and then 4 cases may happen:
1.  The node may not have any left or right child.
    In this case the node is simply deleted and return NULL.
2.  The node contains left child.
    In this case the right child becomes the node.
3.  The node contains only right child.
    In this case the left child become the node.
4.  When the node has both left and right node.
    In this case just find the smallest element in right subtree and make it node and recursively call the function to delete the smallest node.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* findmin(TreeNode* root) //finds the samllest element in a sub-tree
    {
        if(root==NULL)
            return root;
        if(root->left==NULL)
            return root;
        return findmin(root->left);
    }
    TreeNode* deleteNode(TreeNode* root, int key) 
    {
        if(root==NULL)
            return NULL;
        if(root->val==key)  //we found the node
        {
            if(root->left==NULL and root->right==NULL)
            {
                delete root;  //to prevent memory leakage
                return NULL;
            }
            else if(root->left==NULL)
            {
                auto temp=root->right;  //just make the right node as the current node
                delete root;
                return temp;
            }
            else if(root->right==NULL)
            {
                auto temp=root->left;
                delete root;
                return temp;
            }
            else
            {
                auto temp=findmin(root->right);
                root->val=temp->val;        //update the value of the node as smallest node in right sub-tree
                root->right=deleteNode(root->right,temp->val);  //recursive call for deleting the smallest node and key
                return root;
            }
        }
        else if(root->val<key)
        {
            root->right=deleteNode(root->right,key);  //need to go to right sub-tree
            return root;
        }
        else if(root->val>key)
        {
            root->left=deleteNode(root->left,key);  //need to go to left sub-tree
            return root;
        }
        return NULL;
    }
};
