Problem Link:- https://leetcode.com/problems/word-break-ii/

Given a string s and a dictionary of strings wordDict, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in any order.

Note that the same word in the dictionary may be reused multiple times in the segmentation.

 

Example 1:

Input: s = "catsanddog", wordDict = ["cat","cats","and","sand","dog"]
Output: ["cats and dog","cat sand dog"]
Example 2:

Input: s = "pineapplepenapple", wordDict = ["apple","pen","applepen","pine","pineapple"]
Output: ["pine apple pen apple","pineapple pen apple","pine applepen apple"]
Explanation: Note that you are allowed to reuse a dictionary word.

Solution 1:-
Idea is similar to Word Break I.This time along with an dp array storing if we can break [0,i-1] in dp[i], we take a vector<string> to accomodate all the possible 
breakings of string till [0,i-1].

class Solution {
public:
    struct node
    {
        node *v[26]={NULL};
        int eow=0;
    };
    node *head = new node;
    void insert(string &s)
    {
        auto curr=head;
        for(auto x:s)
        {
            if(curr->v[x-'a']==NULL)
                curr->v[x-'a']=new node;
            curr=curr->v[x-'a'];
        }
        curr->eow++;
    }
    void add(vector<string> &v,vector<string> &ans,string s)
    {
        for(auto &x:v)
            ans.push_back(x+" "+s);
    }
    vector<string> wordBreak(string s, vector<string> &v) 
    {
        for(auto &x:v)
            insert(x);
        int n=s.size();
        vector<vector<string>> temp(n+1);
        vector<bool> dp(n+1,0);
        dp[0]=1;
        for(int i=0;i<n;i++)
        {
            if(dp[i])
            {
                auto curr=head;
                for(int j=i;j<n;j++)
                {
                    curr=curr->v[s[j]-'a'];
                    if(curr==NULL)
                        break;
                    if(curr->eow)
                    {
                        dp[j+1]=1;
                        if(temp[i].size())
                           add(temp[i],temp[j+1],s.substr(i,j-i+1));
                        else temp[j+1].push_back(s.substr(i,j-i+1));
                        
                    }
                }
            }
        }
        return temp[n];
    }
};
