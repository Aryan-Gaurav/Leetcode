problem link https://leetcode.com/problems/burst-balloons/

code
class Solution {
public:
int maxCoins(vector<int>& v) 
{
    int n=v.size();
    if(n<1) return 0;
    int dp[n][n];
    memset(dp,0,sizeof(dp));
    for(int len=1;len<=n;len++)
    {
        for(int i=0;i+(len-1)<n;i++)
        {
            int j=i+(len-1);//now see the for loop again
            for(int k=i;k<=j;k++)//think in reverse way....what is the last ballon to be burst
            {
                int val=v[k];
                if(j+1<n)
                    val*=v[j+1];
                if(i-1>=0)
                    val*=v[i-1];
                if(k-1>=0)
                    val+=dp[i][k-1];
                if(k+1<n)
                    val+=dp[k+1][j];
                dp[i][j]=max(val,dp[i][j]);
            }
        }
    }
    return dp[0][n-1];
}
};

//better solution without if else
//16ms
class Solution {
public:
int maxCoins(vector<int>& v) 
{
    v.insert(v.begin(),1);//padding for underflow
    v.push_back(1);       //padding for overflow
    int n=v.size();
    int dp[n][n];
    memset(dp,0,sizeof(dp));
    for(int len=1;len<=n-2;len++)
    {
        for(int i=1;i+(len-1)<n-1;i++)
        {
            int j=i+(len-1);//now see the for loop again
            for(int k=i;k<=j;k++)//think in reverse way....what is the last ballon to be burst
                dp[i][j]=max(v[k]*v[i-1]*v[j+1]+dp[i][k-1]+dp[k+1][j],dp[i][j]);
        }
    }
    return dp[1][n-2];
}
};
